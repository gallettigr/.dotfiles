#!/usr/bin/env bash

# Displays git branch information
prompt_git() {
  local s=''
  local branchName=''

  # Check if the current directory is in a Git repository.
  if [ $(
    git rev-parse --is-inside-work-tree &>/dev/null
    echo "${?}"
  ) == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2>/dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+'
      fi

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!'
      fi

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?'
      fi

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$'
      fi

    fi

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
      git rev-parse --short HEAD 2>/dev/null ||
      echo '(unknown)')"

    [ -n "${s}" ] && s=" [${s}]"

    echo -e "${1}${branchName}${2}${s}"
  else
    return
  fi
}

if tput setaf 1 &>/dev/null; then
  tput sgr0 # reset colors
  bold=$(tput bold)
  reset=$(tput sgr0)
  black=$(tput setaf 0)
  blue=$(tput setaf 33)
  cyan=$(tput setaf 37)
  green=$(tput setaf 64)
  orange=$(tput setaf 166)
  purple=$(tput setaf 125)
  red=$(tput setaf 124)
  violet=$(tput setaf 61)
  white=$(tput setaf 15)
  yellow=$(tput setaf 136)
else
  bold=''
  reset="\e[0m"
  black="\e[1;30m"
  blue="\e[1;34m"
  cyan="\e[1;36m"
  green="\e[1;32m"
  orange="\e[1;33m"
  purple="\e[1;35m"
  red="\e[1;31m"
  violet="\e[1;35m"
  white="\e[1;37m"
  yellow="\e[1;33m"
fi

# Highlight username when logged in as root or when in SSH session.
if [[ "${USER}" == "root" ]]; then
  userStyle="${red}"
elif [[ "${SSH_TTY}" ]]; then
  userStyle="${orage}"
else
  userStyle="${white}"
fi

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]\n"
## username @ current directory
PS1+="\[${userStyle}\]\u \[${white}\]@ \[${yellow}\]/\W"
# current git repo details
PS1+="\$(prompt_git \"\[${white}\] on \[${orange}\]\" \"\[${bold}\]\")\n"
# `$` (and reset color)
PS1+="\[${white}\]\$ \[${reset}\]"
export PS1

PS2="\[${yellow}\]→ \[${reset}\]"
export PS2

# Make vim the default editor
EDITOR="vim"

# Activate shell options
for option in ignoreeof noclobber; do
  set -o "$option" 2>/dev/null
done
unset option

# Enable some optional shell features when possible
for option in autocd cdspell extglob globstar histappend nocaseglob progcomp; do
  shopt -s "$option" 2>/dev/null
done
unset option

# Larger bash history (allow 5000 entries; default is 500)
HISTSIZE=5000
HISTFILESIZE=$HISTSIZE
HISTCONTROL=ignoredups:erasedups:ignorespace

PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

# Make some commands not show up in history
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Prefer US English and use UTF-8
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Highlight section titles in manual pages
export LESS_TERMCAP_md="${yellow}"

# Don’t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Always enable colored `grep` output
export GREP_OPTIONS="--color=auto"

# Assign TTY to GPG
export GPG_TTY=$(tty)
