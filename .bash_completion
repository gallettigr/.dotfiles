#!/usr/bin/env bash

# Add completions under $HOME/.bash_completion.d
if [ -d $HOME/.bash_completion.d/ ]; then
  for file in $HOME/.bash_completion.d/*; do
    if [ -r $file ]; then source "$file"; fi
  done
fi

# Add Gulp completion
if [ -x "$(command -v gulp)" ]; then
  eval "$(gulp --completion=bash)"
fi

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
_ssh_hosts() {
  COMPREPLY=""
  if [ -r "$HOME/.ssh/config" ]; then
    COMPREPLY+=($(grep "^Host" $HOME/.ssh/config | grep -v "[?*]" | cut -d " " -f2 | tr ' ' '\n'))
  fi
  if [ -r "$HOME/.ssh/known_hosts" ]; then
    COMPREPLY+=($(grep -E -o "(([0-9]{1,3}\.){3}[0-9]{1,3})" $HOME/.ssh/known_hosts))
    COMPREPLY+=($(grep -E -o "((?:[a-zA-Z0-9_-]+\.)*[a-zA-Z0-9][a-zA-Z0-9_-]+\.[a-zA-Z]+)" $HOME/.ssh/known_hosts))
  fi
}
complete -o "default" -o "nospace" -F _ssh_hosts scp sftp ssh

# Add Git-Number alias and completion
if [ -x "$(command -v git-number)" ]; then
  # Set aliases
  alias gs="git-number"
  alias ga="gs add"
  alias gc="gs -c git commit"
  alias gd="gs -c git diff --ignore-space-at-eol --ignore-all-space --ignore-space-change --ignore-blank-lines"
  alias gr="gs -c git reset"
  alias gl="gs -c git log -w -b -p --ignore-blank-lines"
  alias gco="gs -c git checkout"

  # Completion for aliases
  if type _git &>/dev/null && [ -f $(brew --prefix)/etc/bash_completion.d/git-completion.bash ]; then
    __git_complete gs _git
    __git_complete ga _git_add
    __git_complete gc _git_commit
    __git_complete gd _git_diff
    __git_complete gr _git_reset
    __git_complete gl _git_log
    # Will autocomplete local branches only, use `git checkout` to list also remotes
    __git_complete gco __git_complete_refs $track_opt
  fi
fi

if [ -x "$(command -v php)" ]; then
  if (php artisan --version > /dev/null); then
    _artisan() {
      local arg="${COMP_LINE#php }"

      case "$arg" in
        artisan*)
          COMP_WORDBREAKS=${COMP_WORDBREAKS//:}
          COMMANDS=`php artisan --raw --no-ansi list | sed "s/[[:space:]].*//g"`
          COMPREPLY=(`compgen -W "$COMMANDS" -- "${COMP_WORDS[COMP_CWORD]}"`)
          ;;
        *)
          COMPREPLY=( $(compgen -o default -- "${COMP_WORDS[COMP_CWORD]}") )
          ;;
      esac

      return 0
    }
    complete -F _artisan php
  fi
fi

# Add Flutter completion
if [ -x "$(command -v flutter)" ]; then
  eval "$(flutter bash-completion)"
fi