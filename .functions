#!/usr/bin/env bash

# Clone permissions
function cpmod() {
  local from=$1
  shift
  local to=$*
  for file in $from $to; do
    [ -e $file ] || { echo "$file does not exist!"; }
  done

  chmod $(stat -f '%p' $from) $to
}

# Check python package dependencies before installing
function peep() {
  local pkg=$1
  pip download $pkg -d /tmp/peep/ --no-binary :all: | grep Collecting | cut -d' ' -f2 | grep -v $pkg
  rm -rf /tmp/peep
}

# Python vEnv
function venv() {
  local proj=$1
  local env="$(pwd)/bin/activate"
  command -v virtualenv >/dev/null 2>&1 || {
    echo "You must first install virtualenv. Run 'pip install virtualenv' to install globally."
    return
  }
  if [ ! -z "$1" ]; then
    virtualenv $1 >/dev/null 2>&1
    cd "$1" && source "$env" >/dev/null 2>&1 && echo "New ${proj} enviroment succesfully created and set as working directory."
  elif [ -e "$env" ]; then
    source "$env" >/dev/null 2>&1 && echo "Switched to '$(basename $(pwd))' environment!"
  else
    echo "No virtual environment set. Verify or create one passing the name as function argument, eg. 'venv anything'"
  fi
}

# Simple calculator
function calc() {
  local result=""
  result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
  if [[ "$result" == *.* ]]; then
    printf "$result" |
      sed -e 's/^\./0./' -e 's/^-\./-0./' -e 's/0*$//;s/\.$//'
  else
    printf "$result"
  fi
  printf "\n"
}

# Folder tree view
function tree() {
  find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
}

# Move to Trash
function trash() {
  mv $1 ~/.Trash
}

# Include file if exists
include() {
  [[ -f "$1" ]] && source "$1"
}

# Create a new directory and enter it
function mkcd() {
  mkdir -p "$@" && cd "$@"
}

# Change working directory to the top-most Finder window location
function cdf() {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Open Finder to working directory. Basically the opposite of cdf
function fdc() {
  open -a Finder .
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null >/dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Create a data URL from a file
function toDataURI() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Create a git.io short URL
function gitio() {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`"
    return 1
  fi
  curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# Start an HTTP server from a directory, optionally specifying the port
function webserver() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Compare original and gzipped file size
function gzize() {
  local origsize=$(wc -c <"$1")
  local gzipsize=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<<"$*" | pygmentize -l javascript
  else # pipe
    python -mjson.tool | pygmentize -l javascript
  fi
}

# Run `dig` and display the most useful info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo "" # newline
  fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo "" # newline
  fi
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo "" # newline
  fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring the `.git` directory, listing directories first.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Search for aliases
function aliases() { grep --color=always -i -a1 $@ $HOME/.aliases | grep -v '^\s*$' | less -FSRXc; }

# Extract most know archives with one command
function extract() {
  if [ -f $1 ]; then
    case $1 in
    *.tar.bz2) tar xjf $1 ;;
    *.tar.gz) tar xzf $1 ;;
    *.bz2) bunzip2 $1 ;;
    *.rar) unrar e $1 ;;
    *.gz) gunzip $1 ;;
    *.tar) tar xf $1 ;;
    *.tbz2) tar xjf $1 ;;
    *.tgz) tar xzf $1 ;;
    *.zip) unzip $1 ;;
    *.Z) uncompress $1 ;;
    *.7z) 7z x $1 ;;
    *) echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Find file under the current directory
function ff() { /usr/bin/find . -name "$@"; }

# Find file whose name starts with a given string
function ffs() { /usr/bin/find . -name "$@"'*'; }

# Find file whose name ends with a given string
function ffe() { /usr/bin/find . -name '*'"$@"; }

# Display useful host related informaton
function ii() {
  echo -e "\nYou are logged on ${RED}$HOST"
  echo -e "\nAdditionnal information:$NC "
  uname -a
  echo -e "\n${RED}Users logged on:$NC "
  w -h
  echo -e "\n${RED}Current date :$NC "
  date
  echo -e "\n${RED}Machine stats :$NC "
  uptime
  echo -e "\n${RED}Current network location :$NC "
  scselect
  echo -e "\n${RED}Public facing IP Address :$NC "
  myip
  #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
  echo
}

# Display information about installed formulas, including size and dependencies
function brew-info() {
  brew leaves | while read pkg; do
    echo -n -e "\033[1m$pkg\033[0m "
    echo -n -e "\033[3m($(brew info $pkg | grep -oE '[0-9]* files, ([0-9.]*[A-z]+)' | head -n 1 | awk '{print $3}'))\033[0m "
    echo -n "-- deps: ["
    brew deps --installed $pkg | awk '{printf(" %s ", $0)}'
    echo "]"
  done
}
